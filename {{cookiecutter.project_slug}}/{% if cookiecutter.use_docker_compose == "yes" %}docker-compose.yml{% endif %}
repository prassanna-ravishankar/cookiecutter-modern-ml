version: '3.8'

services:
  # Training service
  train:
    build:
      context: .
      dockerfile: {% if cookiecutter.docker_support == "yes" %}docker/{% endif %}Dockerfile.train
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
      - ./data:/app/data
      {% if cookiecutter.docker_support == "yes" -%}
      - ./.cache:/app/.cache
      {% endif %}
    environment:
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES:-0}
      - HUGGINGFACE_HUB_CACHE=/app/.cache/huggingface
    {% if cookiecutter.docker_support == "yes" -%}
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    {% endif %}
    profiles:
      - training

  # Serving service
  serve:
    build:
      context: .
      dockerfile: {% if cookiecutter.docker_support == "yes" %}docker/{% endif %}Dockerfile.serve
    ports:
      - "8000:8000"
    volumes:
      - ./models:/app/models:ro
      {% if cookiecutter.docker_support == "yes" -%}
      - ./.cache:/app/.cache:ro
      {% endif %}
    environment:
      - PYTHONPATH=/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    profiles:
      - serving

  # Development service with notebooks
  {% if cookiecutter.include_notebooks == "yes" -%}
  jupyter:
    build:
      context: .
      dockerfile: {% if cookiecutter.docker_support == "yes" %}docker/{% endif %}Dockerfile.train
    ports:
      - "8888:8888"
    volumes:
      - .:/app
      - ./models:/app/models
      - ./data:/app/data
      {% if cookiecutter.docker_support == "yes" -%}
      - ./.cache:/app/.cache
      {% endif %}
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - PYTHONPATH=/app
    command: ["uv", "run", "jupyter", "lab", "--ip=0.0.0.0", "--port=8888", "--no-browser", "--allow-root", "--notebook-dir=/app"]
    profiles:
      - development
  {% endif %}

# Named volumes for persistence
volumes:
  models:
  logs:
  cache: