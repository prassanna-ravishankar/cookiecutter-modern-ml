# Training Dockerfile for {{ cookiecutter.project_name }}
# Optimized for ML training workloads

FROM python:{{ cookiecutter.python_version }}-slim

# Set environment variables for training
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES:-0} \
    HF_HOME=/app/.cache/huggingface \
    TRANSFORMERS_CACHE=/app/.cache/huggingface/transformers

# Install system dependencies for training
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/*

# Install uv
COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /usr/local/bin/

# Set working directory
WORKDIR /app

# Copy project files
COPY pyproject.toml uv.lock* ./
COPY {{ cookiecutter.package_name }}/ ./{{ cookiecutter.package_name }}/
COPY configs/ ./configs/
COPY tests/ ./tests/

# Install dependencies including dev dependencies for training
RUN uv sync --frozen --no-cache --all-extras

# Create directories for outputs
RUN mkdir -p /app/models /app/logs /app/data && \
    useradd --create-home --shell /bin/bash app && \
    chown -R app:app /app

USER app

# Set Python path
ENV PYTHONPATH=/app

# Default command for training
CMD ["uv", "run", "python", "-m", "{{ cookiecutter.package_name }}.models.train_model"]

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD python -c "import {{ cookiecutter.package_name }}; print('Training container healthy')" || exit 1

# Labels for metadata
LABEL maintainer="{{ cookiecutter.author_name }} <{{ cookiecutter.author_email }}>" \
      version="{{ cookiecutter.project_version }}" \
      description="Training container for {{ cookiecutter.project_name }}" \
      purpose="training"